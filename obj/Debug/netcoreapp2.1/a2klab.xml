<?xml version="1.0"?>
<doc>
    <assembly>
        <name>a2klab</name>
    </assembly>
    <members>
        <member name="M:a2klab.Controllers.botController.esperarBot(System.String)">
            <summary>
            Produce una espera 
            </summary>
            <remarks>
            Cuelga la respuesta por una determinada cantidad de tiempo
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.botController.Test(System.String)">
            <summary>
            Este metodo es usado para debuguear la respuesta del bot, retorna el objeto crudo enviado por twillio
            </summary>
            <remarks>
            Retorna un objeto crudo JSON
            </remarks>
        </member>
        <member name="T:a2klab.Controllers.Z_EjemploController">
            <summary>
            Este es un Controller de ejemplo, basarse en este controller para futuros microservicios.
            </summary>
        </member>
        <member name="M:a2klab.Controllers.Z_EjemploController.Get">
            <summary>
            Retorna un valor aleatorio
            </summary>
            <remarks>
            Este servicio pretende servir de ejemplo para crear nuevos microservicios
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.Z_EjemploController.Get(System.Int32)">
            <summary>
            Obtiene un valor especifico
            </summary>
            <remarks>
            Este servicio pretende servir de ejemplo para crear nuevos microservicios
            </remarks>
            GET api/values/5
        </member>
        <member name="M:a2klab.Controllers.Z_EjemploController.Post(System.String)">
            <summary>
            Postea un valor especifico
            </summary>
            <remarks>
            Este servicio pretende servir de ejemplo para crear nuevos microservicios
            </remarks>
            POST api/values
        </member>
        <member name="M:a2klab.Controllers.Z_EjemploController.Put(System.Int32,System.String)">
            <summary>
            Inserta un valor
            </summary>
            <remarks>
            Este servicio pretende servir de ejemplo para crear nuevos microservicios
            </remarks>
            PUT api/values/5
        </member>
        <member name="M:a2klab.Controllers.Z_EjemploController.Delete(System.Int32)">
            <summary>
            Elimina un valor especifico
            </summary>
            <remarks>
            Este servicio pretende servir de ejemplo para crear nuevos microservicios
            </remarks>
            DELETE api/values/5
        </member>
        <member name="M:a2klab.Controllers.FlightController.suscribeFlight(System.String)">
            <summary>
            Busca un vuelo
            </summary>
            <remarks>
            TODO: Se podria buscar en la cache directamente para no hacer una llamada a la api!
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.FlightController.flight(System.String)">
            <summary>
            Busca un vuelo
            </summary>
            <remarks>
            TODO: Se podria buscar en la cache directamente para no hacer una llamada a la api!
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.FlightController.Tokenize(System.String)">
            Este método tokeniza el texto enviado, tratando de quitar las palabras comunes.
            TODO: Intentar usar algo como: https://medium.com/qu4nt/reducir-el-n%C3%BAmero-de-palabras-de-un-texto-lematizaci%C3%B3n-y-radicalizaci%C3%B3n-stemming-con-python-965bfd0c69fa
        </member>
        <member name="M:a2klab.Controllers.ParkingController.longstay(System.String)">
            <summary>
            Crea un booking de longstay
            </summary>
            <remarks>
            TODO: Mientras miran nuestro juego ya creamos algo nuevo 
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.ParkingController.Ticket(System.String)">
            <summary>
            Retorna el precio de un ticket
            </summary>
            <remarks>
            TODO: todos al piso!
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.RodoCopController.RodoCopQry">
            <summary>
            El servicio carga los archivos enviados por el presentador en su respectiva carpeta
            </summary>
            <remarks>
            Esto se utiliza con un form en la capa de presentación, que envia los archivos al servidor y luego retorna el ZIP para descargar e incluir en el ticket de base de datos.
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.RodoCopController.Get(System.Int32)">
            <summary>
            Genera el deploy del ticket enviado
            </summary>
            <remarks>
            Este servicio toma el directorio generado por el ticket, genera el TXT de pasaje y convierte todo a zip; retorna el rirectorio de descarga
            </remarks>
            GET api/rodocop/5
        </member>
        <member name="M:a2klab.Controllers.RodoCopController.delete">
            <summary>
            Elimina todos los directorios creados 
            </summary>
            <remarks>
            Simplemente la ejecución elimina todos los path del server; se debe utilizar solo para depurar.
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.ShopifyController.buscarColleccionesTest(System.String)">
            <summary>
            Busca todas las colecciones
            </summary>
            <remarks>
            Se podria buscar en la cache directamente para no hacer una llamada a la api de shopify
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.ShopifyController.buscarTest(System.String)">
            <summary>
            Busca un producto determinado
            </summary>
            <remarks>
            Se podria buscar en la cache directamente para no hacer una llamada a la api de shopify
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.ShopifyController.ResponseBot(System.String)">
            <summary>
            Retorna un listado de productos
            </summary>
            <remarks>
            Obtiene todo el listado de productos por unos 3600 segundos, si expiro lo vuelve a obtener.
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.SnapController.Index">
            <summary>
            Retorna el ultimo snap
            </summary>
            <remarks>
            De un base64 retorna un jpeg
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.SnapController.snapFile(a2klab.Controllers.UploadSnap)">
            <summary>
            Carga un snap en el directorio snaps
            </summary>
            <remarks>
            Guarda el base64 como txt
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.SpotifyController.getAccessToken(System.String)">
            <summary>
            Obtiene un access token
            </summary>
            <remarks>
            Obtiene un access token con validez en cache por 3600 segundos, si expiro lo vuelve a obtener.
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.SpotifyController.getToken">
            <summary>
            Retorna el token de spotify
            </summary>
            <remarks>
            Obtiene el token de autorización
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.SpotifyController.postToken(System.String)">
            <summary>
            Inserta el token de spotify
            </summary>
            <remarks>
            Setea el token de autorización
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.Utils.Index(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Recorta una imagen
            </summary>
            <remarks>
            Recorta una imagen hosteada en otro equipo
            imagen_Url es la url de la imagen que se quiere cortar
            desdeX y desdeY es desde donde se quiere cortar en pixeles.
            cuantoAncho y cuantoAlto es la cantidad de pixeles que se van a cortar de la posicion anterior.
            tamañoWidth y tamañoHeight, son el ancho y alto de la imagen
            </remarks>
        </member>
        <member name="M:a2klab.Controllers.Utils.test(System.String)">
            <summary>
            Testea que el controlador este activo
            </summary>
        </member>
    </members>
</doc>
